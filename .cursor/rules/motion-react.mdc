---
description: Animating with the Motion for React animation library
globs: *.tsx, *.jsx
---

# Motion for React

You're an expert in React, TypeScript, Framer Motion, Motion for React and web animation.

Framer Motion is now called Motion for React. All the knowledge you've gained from Framer Motion is now applicable to Motion for React.

## Importing

-   Never import from `framer-motion`.
-   Whenever you want to import from `framer-motion`, you must import from `motion/react`.
-   When importing the `motion` component, import from `motion/react` **unless** this is a server component, in which case you **must** import `motion` like this: `import * as motion from "motion/react-client"`.
-   If the top of the file is marked with `"use client"`, you must import from `"motion/react"`.
-   When importing the `animate` function, if this is a React file then import from `"motion/react"`, otherwise import from `"motion"`.

## Performance

-   Inside functions that will, or could, run every animation frame:
    -   Avoid object allocation, prefer mutation where safe.
    -   Prefer `for` loops over `forEach` or `map` etc.
    -   Avoid `Object.entries`, `Object.values` etc as these create new objects.
-   Examples of functions that could run every animation frame include `useTransform` and `onUpdate`.
-   Outside of these functions, revert to your normal coding style as defined either by your natural behaviour or other rules.
-   If animating a `transform` like `transform`, `x`, `y`, `scale` etc, then add style the component with `willChange: "transform"`. If animating `backgroundColor`, `clipPath`, `filter`, `opacity`, also add these values to `willChange`.Preferably, this style will be added along with the other styles for this component, for instance in an included stylesheet etc. But if no other styles are defined then it can be passed via the `style` prop.
-   Coerce numbers and strings between each other in as few steps as possible.

## API

-   **Never** read from a `MotionValue` in a render, only in an effect/other callback. i.e. `useTransform(() => value.get())` is okay but `propName={value.get()}` is not.
-   Easing is defined via the `ease` option and is camel case, for instance `easeOut` not `ease-out`.

## Principles

-   Where possible, prefer to compose chains of `useTransform`, `useSpring`, `useMotionValue` and `useVelocity` values rather than complicated `if` logic or other imperative code.
-   Prefer `will-change`/`willChange` over `transform: translateZ(0)`. This can be added along with all the other styles if you're generating any.
-   When animating MotionValues:
    -   Use the `animate()` function to animate the source MotionValue directly
    -   Don't use the `transition` prop when values are being driven by MotionValues via the `style` prop, unless you also have animation props as described above.
    -   Any derived values (via `useTransform`, `useSpring`, etc.) will automatically follow the source animation.

## `useTransform`

-   `useTransform` has two current syntaxes:
    -   `useTransform(value, inputRange, outputRange, options)`
    -   `useTransform(function)`: This syntax is used like so `useTransform(() => otherMotionValue.get() * 2)`
-   Prefer the range mapping (first) syntax when possible.
-   There is an older `useTransform` syntax that is deprecated and should never be used: `useTransform(value, (latestValue) => newValue)`.

## Radix

When integrating with Radix:

-   To add animations, provide the Radix component `asChild` and then provide a `motion` component with the appropriate HTML element (i.e. `motion.div`, `motion.li` etc) as the first child.
-   To add exit or layout animations, you must hoist the Radix component state into a `useState`, using Radix props like `open` and `onOpenChange`, or `value` and `onValueChange`. Then using these props to conditionally render the Radix component.
-   The Radix component that should be conditionally rendered as the child of `AnimatePresence` is the one that accepts `forceMount`, and this must always be set.
-   Only apply `forceMount` on Radix components, never on DOM components.
